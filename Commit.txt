Commit: The git commit command captues a snapshot of the project's currently staged changes. Committed snapshots can be thought of as "safe" versions of a project because Git will never change them unless you explicitly ask it to.

Example: git commit : This command commits the staged shapshot. This will launch a text editor prompting you for a commit message. After you've entered a message, save the file and close the editor to create the actual commit.
Example: git commit -a : This command commits a snapshot of all changes in the working directory. This only includes modifications to tracked files (those that have been added with git add at some point in their history).
Example: git commit -m "commit message" : This is a shortcut command that immediately creates a commit with a passed commit message. By default, git commit will open the locally configured text editor, and prompt for a commit message to be entered. Passing the -m option will forgo the text editor prompt in favor of an inline message.
Example: git commit -am "commit message" : A power user shortcut command that combines the -a and -m options. This combination immediately creates a commit of all the staged changes and takes and inline commit message.
Example: git commit --amend : This option adds another level of functionality to the commit command. Passing this option will modify the last commit. Instead of creating a new commit, staged changes will be added to the previous commit. This command will open up the system's configured text editor and prompt to change the previously specified commit message.
